Name: Olutoyosi Kuti
Student ID: 102633211
Course: OOP 345
Section: NCC
Purpose: Project

In this project I was required to develop a simulation of an assembly line with any number of stations.The assembly line is made up of a number of workstations, each of which has a certain set of stock items. A line manager fills customer orders at each station as they are required by moving the orders along the line. A list of the items that must be filled is sent in each customer order. If an order demands an item from a station and that item is in stock, the station will fill the next order in the queue. Up until every order is processed, the line manager moves the customer orders from station to station. Any station that has consumed every item in its inventory is unable to fulfil any more orders. When we get to the end of the line, orderd are either complete or incomplete.

The project utilised 5 modules: Utilities, CustomerOrder, Station, LineManager and Workstation modules. 

The utilities module supports the parsing of input files, which include data necessary to set up and configure the assembly line. This module was fairly easy and straight forward to implement, I did not have any major errors to fix.

The Station module manages information about a station on the assembly line, which holds a specific item and fills customer orders. I did not have any trouble implementing this module as it was straight forward and easy to implement.

The CustomerOrder module has all the features necessary to process customer orders as they pass from stations on the assembly line. If there is a request for one of that station's items, it is fulfilled by the station where the provided order is now resting. 
I had some issues with this module, in the custom constructor I attempted to use smart pointers to make the temp double pointer to the Item but I was unable to do that correctly so I just used raw pointers. I also had a major problem with the fillItem function.I did not implement it in a way that items with the same name would be filled only once. The issue was in my if statement, I forgot to check if the item in the list has been filled previously. I only noticed this error in milestone 3 and it took a lot of debugging to find that it was the if statement causing my a lot of stress. I had to change the if statement from >> m_lstItem[i]->m_itemName == station.getItemName())<< to >>if (m_lstItem[i]->m_itemName == station.getItemName() && (!m_lstItem[i]->m_isFilled))<<.

The Workstation Module contains three double ended queues of CustomerOrder type and the class defines the structure of an active station on the assembly line and contains all the functionality for filling customer orders with station items.A Workstation object manages order processing for a single Item on the assembly line. I had another error in this function but this was due to the placement of two lines of code m_orders.pop_front() that removes the top value from the vector and orderMoved = true which is the return value. These two statements are supposed to be executed regardless of whether there is a next station or not. Previously I only added it when there was a next station available. This was an unintended error because I did not notice that it was enclosed in the curly braces for the else statement.

The LineManager module transfers CustomerOrders along the assembly process after configuring it. The user-identified Workstation objects are configured by the LineManager object, which also sequentially moves orders along the line. This module was the hardest to implement and took the longest time. The custom constructor was a bit difficult to figure out the logic but after deliberating and talking about it with my peers I figured out how to implement it. I also had a hard time figuring out how to identify the first station in the assembly line, I used the logic that iterated through the active assembly line twice and checked for the station that is not found as the next station for any of the stations and set it to m_firstStation. The reorder function was also interesting to code because I did not use a basic loop, I used the transform algorithm to iterate through the active assembly lines and rearrange them in their proper order, this was possible because the first station was already set appropriately in the custom constructor.
 