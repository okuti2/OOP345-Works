Full Name: Olutoyosi Kuti
Student Number: 102633211
Seneca Email Address: okuti2@myseneca.ca
Section Information Code: NCC

In this workshop I learned more about the standard library, Containers and iterations. I had issues with learning how to implement the vecotrs and iterators needed in the program. After studying the text I realized that a vector is like an array but can hold data dynamically and an iterator is an object that points to an element in a sequence. I was able to test the knowledge in the Autoshop module since the member variable was a Vehicle* type vector, in the display function we were required to use iterators to iteratie over the elements of the vector. At first I did not notice that specific instruction and just selected each element using m_vehicles[i] but after re-reading I modified the display function to use the iterator. 
I also dealt with error handling and the Utilities, Van, Luxuryvan and Car modules all threw errors when given invalid data. I had previously used throw "Invalid record!" for each of them and for the Utilities module I did throw ("Unrecognized record type: [" + type + "]"); which would return it as a string but the others were const char*. Because of this I had to have two situations to catch. I did not like this implementation as I had believed it could be easier. I then decided to use the logic error class derived from the exception class. I stored the messages inside as an invalid_argument. This way I am only catching an exception object and printing out the message.

--QUESTION Why do you need to deallocate the dynamically allocated memory in your vector?

Each element in the vector holds the dynamically created object Vehicle which might be a Car, Racecar, Van or Luxuryvan and if they are not properly deallocated it will cause a memory leak in the program.

--QUESTION When building an object from the input file, different things can go wrong: the record represents an unknown type of vehicle, or record contains invalid data. How can the function loadData() detect what went wrong? Can you think at another solution than the one you have implemented?
The only other solution I can think of was what I did before my current implementation was just to throw the error in the form of a const char* or string and have to catch statements to print the specifc error messages.


--QUESTION In this workshop you had to use std::list<sdds::Vehicle*> and std::vector<sdds::Vehicle*> to store a collection of vehicles as pointers. Could you have used std::list<sdds::Vehicle> and std::vector<sdds::Vehicle> instead?

No