Full Name: Olutoyosi Kuti
Student Number: 102633211
Seneca Email Address: okuti2@myseneca.ca
Section Information Code: NCC

In this workshop, the topics covered were composition and aggregation relationships between objects. I had a lot of diffuculty in this particular workshop as  i found it hard to identify the differences between aggregation and composition when coding the move, copy, += and -= operators. In this workshop there was a composition relationship between Reservation and Restaurant classes while there was an aggregation relationship between ConfirmationSender and Reservation. The differences between aggregation and composition became clearer to me while working on this particular workshop.
 
Composition is a part-of relationship between classes. It relates to complete ownership and the composer is responsible for destroying its component object before it gets destroyed. All restaurants have reservations and a resevation object cannot exist from the Restaurant object. When a restaurant objects wants to get destoryed it would delete all the reservations before it gets deleted. In this relationship the copy and move assignment are kept in the same way we have been implementing in previous workshops as copies are being made, the assignment operators destroy the old Reservation objects and create a new one. The Restaurant object creates the Reservation object.

Aggregation differs from composition in the fact that it does not handle the creation nor the destruction of the object that it uses, it is a has a relationship. In this workshop ConfirmationSender uses Reservations. This means that Reservation objects exist without the ConfirmationSender, ConfirmationSender only holds the reference to the Reservation object so when ConfirmationSender object fets destroyed unlike composition it does not destory the object it uses so it does not destroy the reservation objects. Also, a ConfirmationSender object can exist without having any reservation objects in it. Aggregation is more flexible than composition. any changes to resevration does not affect ConfirmationSender. In this workshop, ConfirmationSender object is populated using the += operator overload and reservations are removed using the -= operator overload. These do not make copies of the reservation pointers but set the pointers in the array to point to the address of the already created reservation pointers. My move constructor was implemented the same as for the composition relationship but my copy assignment does not create new reservation pointers to copy into, it only creates a new ConfirmationSender object type and populates the pointer to pointer type array with the reservation object references. 

I had issues in the += and -= operators for the ConfirmationSender module. I had to figure out how to implement the aggregate relationship when coding those parts as I kept getting memory leaks because I was using the new keyword to create new instances of the reservation object which was wrong seeing as the relationship is aggregation. It took a while to figure out how to implement the functions and I ended up using temporary objects to modify the ConfirmationSender to modify the array. I still have a lot to learn in terms of this topic because I don't quite understand the difference between association and aggregation yet to decipher what parts of my code were association or aggregation. Restaurant module was definitely a composition relationship with the Reservation module and the copy assignment shows that relationship. ConfirmationSender module has an aggregate relationship with Reservation module and it implemented in the operator overloaded functions (+= and -=).